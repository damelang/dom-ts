<?xml version="1.0"?>
<!--
Copyright (c) 2001 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.
-->

<!--
$Log: build.xml,v $
Revision 1.37  2001-11-27 19:42:27  dom-ts-2
Added targets for dom2-html.


Revision 1.36  2001/11/17 04:28:15  dom-ts-4
Added dom2-core-gen-jsunit target

Revision 1.35  2001/11/16 05:46:09  dom-ts-4
Set debug="on" for java compilation.  Puts line numbers in tracebacks

Revision 1.34  2001/11/14 08:47:46  dom-ts-4
Added pre-generated documentcreatecdatasection.js and .html to
avoid Xalan-J lock ups with some versions

Revision 1.33  2001/11/14 02:08:36  dom-ts-4
Added pre-generated copy of documentcreatecdatasection.java
to avoid lockups with some versions of Xalan-J

Revision 1.32  2001/11/07 06:25:28  dom-ts-4
DOM Level 3 DTD and Schema building

Revision 1.31  2001/11/01 16:41:05  dom-ts-4
Added dom2-core-doxygen, updated usage

Revision 1.30  2001/11/01 15:02:50  dom-ts-4
Doxygen and Avalon support

Revision 1.29  2001/10/30 06:03:39  dom-ts-4
Updated build.xml to use 26 Oct 2001 DOM Level 2 HTML Working Draft

Revision 1.28  2001/10/25 09:29:27  dom-ts-4
test-to-java updates for DOM L2

Revision 1.27  2001/10/18 14:21:59  dom-ts-4
Fixed regexp pattern for stringLiteral
Explicitly specified UTF-8 encoding for test-to-java.xsl, etc
Specified UTF8 encoding for javac

Revision 1.26  2001/10/18 07:58:17  dom-ts-4
assertURIEquals added
Can now run from dom1-core.jar

Revision 1.25  2001/09/14 06:55:35  dom-ts-4
Support for Adobe SVG Viewer (must uncomment code in DOMTestCase.js)

Revision 1.24  2001/09/06 02:35:19  dom-ts-4
Now supporting Mozilla 0.9.3

Revision 1.23  2001/09/06 02:00:04  dom-ts-4
Now supporting Mozilla 0.9.3

Revision 1.22  2001/09/05 17:33:42  dom-ts-4
IE5 support.

Revision 1.21  2001/09/05 16:41:04  dom-ts-4
Support for JsUnit and IE5.

Revision 1.20  2001/09/05 16:39:55  dom-ts-4
Support for JsUnit and IE5.

Revision 1.19  2001/08/30 08:30:17  dom-ts-4
Added metadata and Software licence (dropped in earlier processing) to test
Enhanced test-matrix.xsl

Revision 1.18  2001/08/24 08:28:00  dom-ts-4
Test matrix generation.  Some Node.setValue() tests

Revision 1.17  2001/08/23 08:01:49  dom-ts-4
Test fixups for ignoring whitespace, et al

Revision 1.16  2001/08/22 22:12:46  dom-ts-4
Now passing all tests with default settings

Revision 1.15  2001/08/22 01:46:10  dom-ts-4
Updated subjects based on filename analysis

Revision 1.14  2001/08/21 06:06:12  dom-ts-4
DOM 1 SE targets
Fixed cases that locked Xalan
org.w3c.domts.level1.core.alltests
DOM2 DTD/Schema

Revision 1.13  2001/08/20 06:56:35  dom-ts-4
Full compile (-2 files that lock up Xalan 2.1)

Revision 1.12  2001/08/19 20:51:19  dom-ts-4
Successful DTD validation

Revision 1.11  2001/08/15 04:44:03  dom-ts-4
Added dom1-gen-ecmascript target to build.xml
Minor fixes to test-to-java.xsl and test-to-ecmascript.xsl

Revision 1.10  2001/08/14 18:49:35  dom-ts-4
Changed location of resource files
Remove spurious required ID's from DTD
Added xmlns:xsi and xsi:schema location to DTD
Removed package and targetURI attributes from Schema/DTD

Revision 1.9  2001/08/10 18:53:25  dom-ts-3

Attempt to make indentation more consistent, and limit line length to about
80 characters, for those of us who still need to live in an 80-column world
(if only due to geek social convention).

This only changes whitespace, not content or structure.

Revision 1.8  2001/08/02 04:44:15  dom-ts-4
Adapter for Avalon test framework.

Revision 1.7  2001/07/23 04:52:20  dom-ts-4
Initial test running using JUnit.

Revision 1.6  2001/07/20 05:44:32  dom-ts-4
Initial SVG support.  multiply renamed mult,
All implementation conditions combined into implementationAttribute element

-->
<project default="usage" basedir=".">

<target name="usage">
	<echo message="common targets:"/>
    <echo message="usage                displays this message"/>
    <echo message="clean                deletes all generated files"/>
    <echo message="junit-run            builds JUnit adapter for DOM Tests for Java"/>
    <echo message="avalon-run           builds Avalon Testlet adapter for DOM tests"/>
    <echo message="dom1-core-jar        builds DOM Level 1 Core tests for Java"/>
    <echo message="dom1-schema          builds W3C XML Schema for DOM 1 tests"/>
    <echo message="dom1-core-matrix     builds test matrix for DOM Level 1 Core"/>
    <echo message="dom1-core-validate-tests"/>
    <echo message="                     validates DOM Level 1 Core tests against DTD"/>
    <echo message="dom1-core-gen-ecmascript"/>
    <echo message="                     builds DOM Level 1 Core tests for ECMAScript"/>
    <echo message="dom1-core-gen-jsunit"/>
    <echo message="                     builds JSUnit adapters for DOM Level 1 Core"/>
    <echo message="dom1-core-doxygen    builds documentation for DOM Level 1 Core"/>
    <echo message="dom2-core-*          Same as above but for DOM Level 2 Core"/>
	<echo message=""/>
</target>

<target name="init">
	<property name="specs.dir" value="./lib/specs"/>
	<property name="transforms.dir" value="./transforms"/>
	<property name="build.dir" value="./build"/>
	<property name="java.build.dir" value="./build/java"/>
	<property name="tests.dir" value="./tests"/>
	<property name="metadata.dir" value="./build/metadata"/>
	<property name="dist.dir" value="./dist"/>
	<property name="lib.dir" value="./lib"/>
	<!--  any jar that contains org.w3c.dom and javax.xml.parsers classes  -->
	<property name="jaxp.jar" value="d:/ant1.4/lib/xerces.jar"/>
	<mkdir dir="${build.dir}"/>
	<mkdir dir="${lib.dir}"/>
	<mkdir dir="${specs.dir}"/>
	<mkdir dir="${dist.dir}"/>
</target>

<target name="dom1-init" depends="init">
	<mkdir dir="${specs.dir}"/>
	<mkdir dir="${specs.dir}/Level-1"/>
	<!--   download DOM 1 spec to specs directory   -->
	<get src="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/DOM.zip"
	     dest="${specs.dir}/DOM.zip"
         ignoreerrors="yes"
	     usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM.zip" dest="${specs.dir}/Level-1"/>
	<unzip src="${specs.dir}/Level-1/xml-source.zip" dest="${specs.dir}/Level-1"/>

	<!--  patch wd-dom file to add missing xmlns:xlink attribute  -->
	<patch patchfile="./wd-dom.patch"
	       originalfile="${specs.dir}/Level-1/xml/wd-dom.xml"/>
	<patch patchfile="./level-1-element.patch"
	       originalfile="${specs.dir}/Level-1/xml/definitions/level-one-core/element.xml"/>
</target>

<target name="dom1-schema" depends="dom1-init">
	<style basedir="${specs.dir}/Level-1/xml"
	       in="${specs.dir}/Level-1/xml/wd-dom.xml"
	       out="${build.dir}/_dom1.xsd"
	       style="${transforms.dir}/dom-to-xsd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-1"/>
	</style>

	<!--  remove leading underscore from _xmlns attribute    -->
	<exec executable="sed" output="${build.dir}/dom1.xsd">
		<arg line="'s/_xmlns/xmlns/g' ${build.dir}/_dom1.xsd"/>
	</exec>
	<delete file="${build.dir}/_dom1.xsd"/>
	<copy file="${build.dir}/dom1.xsd" todir="${tests.dir}/level1/core"/>

	<!-- xmlvalidate file="${build.dir}/dom1.xsd" lenient="no"
	     failonerror="yes"
	     classname="org.apache.xerces.parsers.SAXParser"/ -->
</target>

<target name="dom1-dtd" depends="dom1-init">
	<style basedir="${specs.dir}/Level-1/xml"
	       in="${specs.dir}/Level-1/xml/wd-dom.xml"
	       out="${build.dir}/dom1.dtd"
	       style="${transforms.dir}/dom-to-dtd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-1"/>
	</style>
	<copy file="${build.dir}/dom1.dtd" todir="${tests.dir}/level1/core"/>
</target>

<target name="dom1-subjects" depends="dom1-init">
	<style basedir="${specs.dir}/Level-1/xml"
	       in="${specs.dir}/Level-1/xml/wd-dom.xml"
	       out="${build.dir}/dom1-subjects.xml"
	       style="${transforms.dir}/subjects.xsl"/>
</target>

<target name="dom1-core-metadata" depends="dom1-init">
    <mkdir dir="${build.dir}"/>
	<style in="${tests.dir}/level1/core/alltests.xml" 
		   out="${build.dir}/dom1-core-metadata.rdf" 
	       style="${transforms.dir}/combine-metadata.xsl">
		<param name="baseURI"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level1/core/"/>
        <param name="externalMetadata" expression="metadata.xml"/>
	</style>
</target>


<target name="dom1-core-matrix" depends="dom1-core-metadata,dom1-subjects,dom1-interfaces">
    <mkdir dir="${build.dir}"/>
	<style in="${build.dir}/dom1-core-metadata.rdf" 
		   out="${build.dir}/dom1-core-matrix.html" 
	       style="${transforms.dir}/test-matrix.xsl">
		<param name="specURI"
		       expression="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#"/>
        <param name="interfacesURL" expression="dom1-interfaces.xml"/>
        <param name="specMetadataURL" expression="dom1-subjects.xml"/>
	</style>
</target>


<target name="analyze-names" depends="dom1-interfaces">
    <mkdir dir="${build.dir}/java/org/w3c/domts/level1/core"/>
	<style basedir="${tests.dir}/level1/core" 
		   destdir="${java.build.dir}/org/w3c/domts/level1/core" 
		   includes="*.xml" 
	       style="${transforms.dir}/check-subjects.xsl" 
	       extension=".xml">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom1-interfaces.xml"/>
		<param name="package"
		       expression="org.w3c.domts.level1.core"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level1/core/"/>
	</style>
</target>


<target name="dom1-interfaces" depends="dom1-init">
	<style basedir="${specs.dir}/Level-1/xml"
	       in="${specs.dir}/Level-1/xml/wd-dom.xml"
	       out="${build.dir}/dom1-interfaces.xml"
	       style="${transforms.dir}/extract.xsl"/>
</target>

<!--  this target downloads the DOM Level 1 Second Edition Working Draft  -->
<target name="dom1SE-init" depends="init">
	<mkdir dir="${specs.dir}"/>
	<mkdir dir="${specs.dir}/Level-1SE"/>
	<!--   download DOM 1 spec to specs directory   -->
	<get src="http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/DOM.zip"
	     dest="${specs.dir}/DOM1SE.zip"
         ignoreerrors="yes"
	     usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM1SE.zip" dest="${specs.dir}/Level-1SE"/>
	<unzip src="${specs.dir}/Level-1SE/xml-source.zip" dest="${specs.dir}/Level-1SE"/>

</target>


<target name="dom1SE-schema" depends="dom1SE-init">
	<style basedir="${specs.dir}/Level-1SE"
	       in="${specs.dir}/Level-1SE/wd-dom.xml"
	       out="${build.dir}/_dom1SE.xsd"
	       style="${transforms.dir}/dom-to-xsd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-1"/>
	</style>

	<!--  remove leading underscore from _xmlns attribute    -->
	<exec executable="sed" output="${build.dir}/dom1SE.xsd">
		<arg line="'s/_xmlns/xmlns/g' ${build.dir}/_dom1SE.xsd"/>
	</exec>
	<delete file="${build.dir}/_dom1SE.xsd"/>
	<copy file="${build.dir}/dom1SE.xsd" todir="${tests.dir}/level1/core"/>

</target>


<target name="dom1SE-dtd" depends="dom1SE-init">
	<style basedir="${specs.dir}/Level-1SE"
	       in="${specs.dir}/Level-1SE/wd-dom.xml"
	       out="${build.dir}/dom1SE.dtd"
	       style="${transforms.dir}/dom-to-dtd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-1"/>
	</style>
	<copy file="${build.dir}/dom1SE.dtd" todir="${tests.dir}/level1/core"/>
</target>

<target name="dom1SE-subjects" depends="dom1SE-init">
	<style basedir="${specs.dir}/Level-1SE"
	       in="${specs.dir}/Level-1SE/wd-dom.xml"
	       out="${build.dir}/dom1SE-subjects.xml"
	       style="${transforms.dir}/subjects.xsl"/>
</target>

<target name="dom1SE-interfaces" depends="dom1SE-init">
	<style basedir="${specs.dir}/Level-1SE"
	       in="${specs.dir}/Level-1SE/wd-dom.xml"
	       out="${build.dir}/dom1SE-interfaces.xml"
	       style="${transforms.dir}/extract.xsl"/>
</target>


<target name="dom2-init" depends="init">
	<mkdir dir="${specs.dir}"/>
	<mkdir dir="${specs.dir}/Level-2"/>
	<!--   download DOM 1 spec to specs directory   -->
	<get src="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/DOM2-Core.zip"
		dest="${specs.dir}/DOM2-Core.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM2-Core.zip"
	       dest="${specs.dir}/Level-2/Core"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-2/Core/xml-source.zip"
	       dest="${specs.dir}/Level-2/xml/core"/>

	<get src="http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/DOM2-Views.zip"
		dest="${specs.dir}/DOM2-Views.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM2-Views.zip"
	       dest="${specs.dir}/Level-2/Views"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-2/Views/xml-source.zip"
	       dest="${specs.dir}/Level-2/xml/views"/>


	<get src="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/DOM2-Events.zip"
		dest="${specs.dir}/DOM2-Events.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM2-Events.zip"
	       dest="${specs.dir}/Level-2/Events"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-2/Events/xml-source.zip"
	       dest="${specs.dir}/Level-2/xml/events"/>

	<get src="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/DOM2-Style.zip"
		dest="${specs.dir}/DOM2-Style.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM2-Style.zip"
	       dest="${specs.dir}/Level-2/Style"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-2/Style/xml-source.zip"
	       dest="${specs.dir}/Level-2/xml/style"/>

	<get src="http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113/DOM2-Traversal-Range.zip"
		dest="${specs.dir}/DOM2-Traversal-Range.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM2-Traversal-Range.zip"
	       dest="${specs.dir}/Level-2/Traversal-Range"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-2/Traversal-Range/xml-source.zip"
	       dest="${specs.dir}/Level-2/xml/traversal-range"/>


	<get src="http://www.w3.org/TR/2001/WD-DOM-Level-2-HTML-20011025/DOM2-HTML.zip"
		dest="${specs.dir}/DOM2-HTML.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM2-HTML.zip"
	       dest="${specs.dir}/Level-2/HTML"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-2/HTML/xml-source.zip"
	       dest="${specs.dir}/Level-2/xml/html"/>

	<!--  zip file is missing two support files   -->
	<echo file="${specs.dir}/Level-2/xml/options.xml"
	      message="&lt;?xml version='1.0' encoding='UTF-8'?&gt;"/>
	<echo file="${specs.dir}/Level-2/xml/status.xml"
	      message="&lt;?xml version='1.0'  encoding='UTF-8'?&gt;"/>

    <!--  change name parameter of Element.getElementsByTagName to tagname   -->
	<patch patchfile="./level-2-element.patch"
	       originalfile="${specs.dir}/Level-2/xml/core/definitions/element.xml"/>

</target>

<target name="dom2-schema" depends="dom2-interfaces">
	<style in="${build.dir}/dom2-interfaces.xml"
	       out="${build.dir}/_dom2.xsd"
	       style="${transforms.dir}/dom-to-xsd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-2"/>
	</style>

	<!--  remove leading underscore from _xmlns attribute    -->
	<exec executable="sed" output="${build.dir}/dom2.xsd">
		<arg line="'s/_xmlns/xmlns/g' ${build.dir}/_dom2.xsd"/>
	</exec>
	<delete file="${build.dir}/_dom2.xsd"/>
</target>

<target name="dom2-dtd" depends="dom2-interfaces">
	<style in="${build.dir}/dom2-interfaces.xml"
	       out="${build.dir}/dom2.dtd"
	       style="${transforms.dir}/dom-to-dtd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-2"/>
	</style>
	<copy file="${build.dir}/dom2.dtd" todir="${tests.dir}/level2/core"/>
</target>

<target name="dom2-subjects" depends="dom2-init">
	<!--  create a DOM 2 version of subjects.xsl  -->
	<exec executable="sed" output="${build.dir}/dom2-subjects.xsl">
		<arg line="'{s/dom1.dtd/dom2.dtd/;s/Level-1/Level-2/;}' ${transforms.dir}/subjects.xsl"/>
	</exec>

	<style in="${specs.dir}/Level-2/xml/core/dom-spec.xml"
	       out="${build.dir}/dom2-core-subjects.xml"
	       style="${build.dir}/dom2-subjects.xsl"/>
	<style in="${specs.dir}/Level-2/xml/views/dom-spec.xml"
	       out="${build.dir}/dom2-views-subjects.xml"
	       style="${build.dir}/dom2-subjects.xsl"/>
	<style in="${specs.dir}/Level-2/xml/events/dom-spec.xml"
	       out="${build.dir}/dom2-events-subjects.xml"
	       style="${build.dir}/dom2-subjects.xsl"/>
	<style in="${specs.dir}/Level-2/xml/traversal-range/dom-spec.xml"
	       out="${build.dir}/dom2-traversal-range-subjects.xml"
	       style="${build.dir}/dom2-subjects.xsl"/>
	<style in="${specs.dir}/Level-2/xml/html/dom-spec.xml"
	       out="${build.dir}/dom2-html-subjects.xml"
	       style="${build.dir}/dom2-subjects.xsl"/>
	<!--  remove DOM 2 version of subjects.xsl  -->
	<delete file="{build.dir}/dom2-subjects.xsl"/>
</target>



<target name="dom2-interfaces" depends="dom2-init">
	<style in="${specs.dir}/Level-2/xml/core/dom-spec.xml"
	       out="${build.dir}/dom2-interfaces.xml"
	       style="${transforms.dir}/dom2-combine.xsl"/>
	<xmlvalidate file="${build.dir}/dom2-interfaces.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>
</target>



<target name="dom1-core-validate-tests" depends="init">
	<xmlvalidate lenient="no" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser">
		<fileset dir="${tests.dir}/level1/core" includes="*.xml" 
		    excludes="attrsetvaluenomodificationallowederr.xml,attrsetvaluenomodificationallowederrEE.xml"/>  
	</xmlvalidate>
</target>


<target name="dom1-core-gen-java" depends="dom1-interfaces, dom1-dtd">
    <mkdir dir="${build.dir}/java/org/w3c/domts/level1/core"/>


    <!--  a prefabricated documentcreatecdatasection.java
             is provided since some versions of Xalan-J
                   will stall when processing it    -->
    <copy file="${tests.dir}/level1/core/documentcreatecdatasection.java" 
            todir="${java.build.dir}/org/w3c/domts/level1/core"/>


	<style basedir="${tests.dir}/level1/core" 
		   destdir="${java.build.dir}/org/w3c/domts/level1/core" 
		   includes="*.xml" 
           excludes="metadata.xml,documentcreatecdatasection.xml"
	       style="${transforms.dir}/test-to-java.xsl" 
	       extension=".java">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom1-interfaces.xml"/>
		<param name="package"
		       expression="org.w3c.domts.level1.core"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level1/core/"/>
	</style>


</target>

<target name="jsunit-init" depends="init">
	<get src="http://www.edwardh.com/jsunit/jsunit.zip"
		dest="${lib.dir}/jsunit.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>
	<unzip src="${lib.dir}/jsunit.zip" dest="${lib.dir}"/>
</target>

<target name="dom1-core-gen-jsunit" depends="jsunit-init,dom1-interfaces,dom1-dtd">
    <mkdir dir="${build.dir}/ecmascript/level1/core"/>
	<copy file="ecmascript/DOMTestCase.js" todir="${build.dir}/ecmascript/level1/core"/>
    <copy todir="${build.dir}/ecmascript/level1/core">
		<fileset dir="tests/level1/core/files" excludes="*.bak"/>
    </copy>

    <!--  a prefabricated documentcreatecdatasection.html
             is provided since some versions of Xalan-J
                   will stall when processing it    -->
    <copy file="${tests.dir}/level1/core/documentcreatecdatasection.html" 
            todir="${build.dir}/ecmascript/level1/core"/>


	<style basedir="${tests.dir}/level1/core" 
		   destdir="${build.dir}/ecmascript/level1/core" 
		   includes="*.xml" 
           excludes="metadata.xml,documentcreatecdatasection.xml"
	       style="${transforms.dir}/test-to-jsunit.xsl" 
	       extension=".html">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom1-interfaces.xml"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level1/core/"/>
	</style>
</target>

<target name="dom1-core-jsunit-zip" depends="init">
    <zip zipfile="${dist.dir}/dom1-core-ecma.zip"
         basedir="."
         excludes="*.bak"
         includes="lib/jsunit/*.*, lib/jsunit/app/*.*, lib/jsunit/images/*.*, build/ecmascript/level1/core/*.*"/>

</target>


<target name="dom1-core-gen-ecmascript" depends="dom1-interfaces">
    <mkdir dir="${build.dir}/ecmascript/level1/core"/>

    <!--  a prefabricated documentcreatecdatasection.js
             is provided since some versions of Xalan-J
                   will stall when processing it    -->
    <copy file="${tests.dir}/level1/core/documentcreatecdatasection.js" 
            todir="${build.dir}/ecmascript/level1/core"/>

	<style basedir="${tests.dir}/level1/core" 
		   destdir="${build.dir}/ecmascript/level1/core" 
		   includes="*.xml" 
           excludes="metadata.xml,documentcreatecdatasection.xml"
	       style="${transforms.dir}/test-to-ecmascript.xsl" 
	       extension=".js">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom1-interfaces.xml"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level1/core/"/>
	</style>
</target>


<target name="common-javac" depends="init">
	<mkdir dir="${java.build.dir}"/>
	<javac srcdir="java/org/w3c/domts" 
		   destdir="${java.build.dir}" 
		   classpath="${java.build.dir}"
           debug="on"
		   encoding="UTF8"/>
</target>

<target name="dom1-core-javac" depends="common-javac,dom1-core-gen-java">
	<javac srcdir="${java.build.dir}/org/w3c/domts/level1/core" 
		destdir="${java.build.dir}" 
		classpath="${java.build.dir};${jaxp.jar}"
        debug="on"
		encoding="UTF8"/>
</target>

<target name="dom1-core-jar" depends="dom1-core-javac">
	<jar jarfile="${dist.dir}/dom1-core.jar" manifest="java/dom1-core.mf">
		<fileset dir="${java.build.dir}"
		         includes="org/w3c/domts/*" excludes="*.bak"/>
		<fileset dir="${java.build.dir}"
		         includes="org/w3c/domts/level1/core/*"
		         excludes="*.bak"/>
		<fileset dir="tests/level1/core/files" excludes="*.bak"/>
		<fileset dir="java"
		         includes="org/w3c/domts/*" excludes="*.bak"/>
	</jar>
</target>

<target name="dom1-core-javadoc" depends="dom1-core-gen-java">
    <mkdir dir="${build.dir}/javadoc"/>
    <javadoc packagenames="org.w3c.domts.*"
             sourcepath="java/org/w3c/domts/level1/core;java/junit;${lib.dir}/junit3.7/junit.jar;${lib.dir}/testlet.dir"
             destdir="${build.dir}/javadoc"
             author="true"
             version="true"
             use="true"
             windowtitle="DOM Test Suite"
             bottom="Copyright &#169; 2001 World Wide Web Consortium.">
             <group title="Test Suite Framework" packages="org.w3c.domts"/>
             <group title="DOM Level 1 Core" packages="org.w3c.domts.level1.core"/>
             <group title="DOM Level 2 Core" packages="org.w3c.domts.level2.core"/>
    </javadoc>
</target>

<target name="dom1-core-doxygen" depends="dom1-core-gen-java">
    <mkdir dir="${build.dir}/doxygen/level1"/>

    <!--  doxygen must be on path  
          download from http://www.doxygen.org    -->
    <exec executable="doxygen">
        <arg line="dom1-core.doxygen"/>
    </exec>

    <zip zipfile="${dist.dir}/dom1-core-doxygen.zip"
         basedir="${build.dir}/doxygen/level1/html"/>

</target>


<target name="dom2-core-validate-tests" depends="init">
	<xmlvalidate lenient="no" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser">
		<fileset dir="${tests.dir}/level2/core" includes="*.xml"/>  
	</xmlvalidate>
</target>


<target name="dom2-core-gen-java" depends="dom2-interfaces,dom2-dtd">
    <mkdir dir="${build.dir}/java/org/w3c/domts/level2/core"/>
    <!-- TODO: explicitly excludes tests that Xalan 2.1 has problems with  -->
	<style basedir="${tests.dir}/level2/core" 
		   destdir="${java.build.dir}/org/w3c/domts/level2/core" 
		   includes="*.xml" 
           excludes="metadata.xml"
	       style="${transforms.dir}/test-to-java.xsl" 
	       extension=".java">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom2-interfaces.xml"/>
		<param name="package"
		       expression="org.w3c.domts.level2.core"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level2/core/"/>
	</style>
</target>

<target name="dom2-core-gen-ecmascript" depends="dom2-interfaces,dom2-dtd">
    <mkdir dir="${build.dir}/ecmascript/level2/core"/>
	<style basedir="${tests.dir}/level2/core" 
		   destdir="${build.dir}/ecmascript/level2/core" 
		   includes="*.xml" 
           excludes="metadata.xml"
	       style="${transforms.dir}/test-to-ecmascript.xsl" 
	       extension=".js">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom2-interfaces.xml"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level2/core/"/>
	</style>
</target>

<target name="dom2-core-gen-jsunit" depends="jsunit-init,dom2-interfaces,dom2-dtd">
    <mkdir dir="${build.dir}/ecmascript/level1/core"/>
	<copy file="ecmascript/DOMTestCase.js" todir="${build.dir}/ecmascript/level2/core"/>
    <copy todir="${build.dir}/ecmascript/level2/core">
		<fileset dir="tests/level2/core/files" excludes="*.bak"/>
    </copy>

	<style basedir="${tests.dir}/level2/core" 
		   destdir="${build.dir}/ecmascript/level2/core" 
		   includes="*.xml" 
           excludes="metadata.xml"
	       style="${transforms.dir}/test-to-jsunit.xsl" 
	       extension=".html">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom2-interfaces.xml"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level2/core/"/>
	</style>
</target>

<target name="dom2-html-gen-ecmascript" depends="dom2-interfaces,dom2-dtd">
    <mkdir dir="${build.dir}/ecmascript/level2/html"/>
	<style basedir="${tests.dir}/level2/html" 
		   destdir="${build.dir}/ecmascript/level2/html" 
		   includes="*.xml" 
           excludes="metadata.xml"
	       style="${transforms.dir}/test-to-ecmascript.xsl" 
	       extension=".js">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom2-interfaces.xml"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level2/html/"/>
	</style>
</target>

<target name="dom2-html-gen-jsunit" depends="jsunit-init,dom2-interfaces,dom2-dtd">
    <mkdir dir="${build.dir}/ecmascript/level2/html"/>
	<copy file="ecmascript/DOMTestCase.js" todir="${build.dir}/ecmascript/level2/html"/>
    <copy todir="${build.dir}/ecmascript/level2/html">
		<fileset dir="tests/level2/html/files" excludes="*.bak"/>
    </copy>

	<style basedir="${tests.dir}/level2/html" 
		   destdir="${build.dir}/ecmascript/level2/html" 
		   includes="*.xml" 
           excludes="metadata.xml"
	       style="${transforms.dir}/test-to-jsunit.xsl" 
	       extension=".html">
		<param name="interfaces-docname"
		       expression="../${build.dir}/dom2-interfaces.xml"/>
		<param name="target-uri-base"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/level2/html/"/>
	</style>
</target>


<target name="dom2-core-javac" depends="common-javac,dom2-core-gen-java">
	<javac srcdir="${java.build.dir}/org/w3c/domts/level2/core" 
		destdir="${java.build.dir}" 
		classpath="${java.build.dir};${jaxp.jar}"
        debug="on"
		encoding="UTF8"/>
</target>

<target name="dom2-core-jar" depends="dom2-core-javac">
	<!--  will need to provide a manifest    -->
	<jar jarfile="${dist.dir}/dom2-core.jar"  manifest="java/dom2-core.mf">
		<fileset dir="${java.build.dir}"
		         includes="org/w3c/domts/*" excludes="*.bak"/>
		<fileset dir="${java.build.dir}"
		         includes="org/w3c/domts/level2/core/*"
		         excludes="*.bak"/>
		<fileset dir="tests/level2/core/files" excludes="*.bak"/>
		<fileset dir="java"
		         includes="org/w3c/domts/*" excludes="*.bak"/>
	</jar>
</target>


<target name="dom2-core-doxygen" depends="dom2-core-gen-java">
    <mkdir dir="${build.dir}/doxygen/level2"/>

    <!--  doxygen must be on path  
          download from http://www.doxygen.org    -->
    <exec executable="doxygen">
        <arg line="dom2-core.doxygen"/>
    </exec>

    <zip zipfile="${dist.dir}/dom2-core-doxygen.zip"
         basedir="${build.dir}/doxygen/level2/html"/>

</target>



<target name="junit-run" depends="common-javac">
	<!--  get JUnit 3.7 into lib directory  -->
	<get src="http://download.sourceforge.net/junit/junit3.7.zip"
		dest="${lib.dir}/junit.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>
	<unzip src="${lib.dir}/junit.zip" dest="${lib.dir}"/>

    <copy file="${lib.dir}/junit3.7/junit.jar" todir="${dist.dir}"/>

    <mkdir dir="${java.build.dir}/junit"/>

    <javac srcdir="java/junit/org/w3c/domts"
           destdir="${java.build.dir}/junit"
           classpath="${lib.dir}/junit3.7/junit.jar;${java.build.dir}"           
           debug="on"
		   encoding="UTF8"/>


    <jar jarfile="${dist.dir}/junit-run.jar"
        manifest="java/junit/junit-run.mf">
        <fileset dir="${java.build.dir}/junit"
	         includes="org/w3c/domts/*" excludes="*.bak"/>
    </jar>
</target>


<target name="avalon-run" depends="common-javac">
	<!--  get Avalon into lib directory  -->
	<mkdir dir="${java.build.dir}/avalon"/>

    <!--  Download a nightly build of Avalon testlet source
              No binaries available since project was suspended  -->
    <!--
	<get src="http://jakarta.apache.org/builds/jakarta-avalon/nightly/2001-10-31/jakarta-avalon-testlet-src.zip"
	     dest="${lib.dir}/jakarta-avalon-testlet-src.zip"
	     usetimestamp="yes"/>
    -->

    <!--    unzip source   -->
	<unzip src="${lib.dir}/jakarta-avalon-testlet-src.zip" dest="${lib.dir}"/>

    

    <!--    compile java files   -->
    <ant antfile="build.xml" 
         dir="${lib.dir}/jakarta-avalon-testlet/"         
         target="compile"/>

    <!--   build jar file (done here since task build.xml is not compatible with current Ant) -->
	<jar jarfile="${lib.dir}/testlet.jar">
        <fileset dir="${lib.dir}/jakarta-avalon-testlet/build/classes"
                 includes="org/apache/testlet/**" />
        <zipfileset src="${lib.dir}/jakarta-avalon-testlet/lib/clutil.jar" includes="**/*.class"/>
	</jar>

    <copy file="${lib.dir}/testlet.jar" todir="${dist.dir}"/>


	<javac srcdir="java/avalon/org/w3c/domts"
	       destdir="${java.build.dir}/avalon"
	       classpath="${lib.dir}/testlet.jar;${java.build.dir}"	       
           debug="on"
		   encoding="UTF8"/>

	<jar jarfile="${dist.dir}/avalon-run.jar"
	     manifest="java/avalon/avalon-run.mf">
		<fileset dir="${java.build.dir}/avalon"
		         includes="org/w3c/domts/*" excludes="*.bak"/>
	</jar>
</target>


<target name="clean" depends="init">
	<delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="tests\level1\core\dom1.dtd"/>
    <delete file="tests\level1\core\dom1.xsd"/>
    <delete file="tests\level2\core\dom2.dtd"/>
    <delete file="tests\level2\core\dom2.xsd"/>
</target>

<target name="dom3-init" depends="init,dom2-init">
	<mkdir dir="${specs.dir}"/>
	<mkdir dir="${specs.dir}/Level-3"/>

	<!--   download DOM 3 Core spec to specs directory   -->
	<get src="http://www.w3.org/TR/2001/WD-DOM-Level-3-Core-20010913/DOM3-Core.zip"
		dest="${specs.dir}/DOM3-Core.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM3-Core.zip"
	       dest="${specs.dir}/Level-3/Core"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-3/Core/xml-source.zip"
	       dest="${specs.dir}/Level-3/xml/core"/>

	<get src="http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025/DOM3-ASLS.zip"
		dest="${specs.dir}/DOM3-ASLS.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM3-ASLS.zip"
	       dest="${specs.dir}/Level-3/ASLS"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-3/ASLS/xml-source.zip"
	       dest="${specs.dir}/Level-3/xml/asls"/>


	<get src="http://www.w3.org/TR/2001/WD-DOM-Level-3-XPath-20011031/DOM3-XPath.zip"
		dest="${specs.dir}/DOM3-XPath.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM3-XPath.zip"
	       dest="${specs.dir}/Level-3/XPath"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-3/XPath/xml-source.zip"
	       dest="${specs.dir}/Level-3/xml/xpath"/>


	<get src="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010823/DOM3-Events.zip"
		dest="${specs.dir}/DOM3-Events.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM3-Events.zip"
	       dest="${specs.dir}/Level-3/Events"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-3/Events/xml-source.zip"
	       dest="${specs.dir}/Level-3/xml/events"/>


	<get src="http://www.w3.org/TR/2000/WD-DOM-Level-3-Views-20001115/DOM3-Views.zip"
		dest="${specs.dir}/DOM3-Views.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>

	<unzip src="${specs.dir}/DOM3-Views.zip"
	       dest="${specs.dir}/Level-3/Views"/>
	<!--  XML source has unusual ../../whatever paths,
	        must put in several layers deep to prevent writing out
			of build tree   -->
	<unzip src="${specs.dir}/Level-3/Views/xml-source.zip"
	       dest="${specs.dir}/Level-3/xml/views"/>

    <get src="http://www.w3.org/2001/11/xmlspec-v22-dom.dtd"
        ignoreerrors="yes" usetimespace="yes"
        dest="${specs.dir}/pubtext/xmlspec-v22-dom.dtd"/>

	<echo file="${specs.dir}/Level-3/xml/status.xml"
	      message="&lt;?xml version='1.0'  encoding='UTF-8'?&gt;"/>

	<echo file="${specs.dir}/Level-3/xml/toc.xml"
	      message="&lt;?xml version='1.0'  encoding='UTF-8'?&gt;"/>

	<patch patchfile="./level-3-element.patch"
	       originalfile="${specs.dir}/Level-3/xml/core/definitions/element.xml"/>

	<patch patchfile="./level-3-version.patch"
	       originalfile="${specs.dir}/Level-3/xml/version.xml"/>

	<patch patchfile="./level-3-part-entities.patch"
	       originalfile="${specs.dir}/Level-3/xml/part-entities.xml"/>

    <!--  text.xml is missing   -->
    <copy file="${specs.dir}/Level-2/xml/core/definitions/text.xml"
          todir="${specs.dir}Level-3/xml/core/definitions"/>


</target>

<target name="dom3-interfaces" depends="dom3-init">
	<style in="${specs.dir}/Level-3/xml/core/dom-spec.xml"
	       out="${build.dir}/dom3-interfaces.xml"
	       style="${transforms.dir}/dom3-combine.xsl"/>
	<xmlvalidate file="${build.dir}/dom3-interfaces.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>
</target>

<target name="dom3-schema" depends="dom3-interfaces">
	<style in="${build.dir}/dom3-interfaces.xml"
	       out="${build.dir}/_dom3.xsd"
	       style="${transforms.dir}/dom-to-xsd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-3"/>
	</style>

	<!--  remove leading underscore from _xmlns attribute    -->
	<exec executable="sed" output="${build.dir}/dom3.xsd">
		<arg line="'s/_xmlns/xmlns/g' ${build.dir}/_dom3.xsd"/>
	</exec>
	<delete file="${build.dir}/_dom3.xsd"/>
</target>

<target name="dom3-dtd" depends="dom3-interfaces">
	<style in="${build.dir}/dom3-interfaces.xml"
	       out="${build.dir}/dom3.dtd"
	       style="${transforms.dir}/dom-to-dtd.xsl">
		<param name="schema-namespace"
		   expression="http://www.w3.org/2001/DOM-Test-Suite/Level-3"/>
	</style>
	<copy file="${build.dir}/dom3.dtd" todir="${tests.dir}/level3/core"/>
</target>

<target name="dom3-subjects" depends="dom3-init">
	<!--  create a DOM 2 version of subjects.xsl  -->
	<exec executable="sed" output="${build.dir}/dom3-subjects.xsl">
		<arg line="'{s/dom1.dtd/dom3.dtd/;s/Level-1/Level-3/;}' ${transforms.dir}/subjects.xsl"/>
	</exec>

	<style in="${specs.dir}/Level-3/xml/core/dom-spec.xml"
	       out="${build.dir}/dom3-core-subjects.xml"
	       style="${build.dir}/dom3-subjects.xsl"/>
	<style in="${specs.dir}/Level-3/xml/views/dom-spec.xml"
	       out="${build.dir}/dom3-views-subjects.xml"
	       style="${build.dir}/dom3-subjects.xsl"/>
	<style in="${specs.dir}/Level-3/xml/events/dom-spec.xml"
	       out="${build.dir}/dom3-events-subjects.xml"
	       style="${build.dir}/dom3-subjects.xsl"/>
	<style in="${specs.dir}/Level-3/xml/xpath/dom-spec.xml"
	       out="${build.dir}/dom3-xpath-subjects.xml"
	       style="${build.dir}/dom3-subjects.xsl"/>
	<style in="${specs.dir}/Level-3/xml/asls/dom-spec.xml"
	       out="${build.dir}/dom3-asls-subjects.xml"
	       style="${build.dir}/dom3-subjects.xsl"/>
	<!--  remove DOM 2 version of subjects.xsl  -->
	<delete file="{build.dir}/dom3-subjects.xsl"/>
</target>


<target name="svg-init" depends="init">
	<mkdir dir="${specs.dir}"/>
	<mkdir dir="${specs.dir}/SVG1.0"/>
	<!--   download SVG 1.0 Proposed Recommendation to specs directory   -->
	<get src="http://www.w3.org/TR/2001/PR-SVG-20010719/PR-SVG-20010719.zip"
		dest="${specs.dir}/SVG.zip"
        ignoreerrors="yes"
		usetimestamp="yes"/>


	<unzip src="${specs.dir}/SVG.zip" dest="${specs.dir}/SVG1.0"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/coords.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/coords.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/coords.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/animate.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/animate.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/animate.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/color.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/color.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/color.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/extend.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/extend.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/extend.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>


	<exec executable="sed" output="${specs.dir}/SVG1.0/interact.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/interact.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/interact.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/linking.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/linking.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/linking.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/masking.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/masking.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/masking.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/painting.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/painting.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/painting.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/paths.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/paths.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/paths.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/pservers.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/pservers.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/pservers.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/script.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/script.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/script.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/shapes.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/shapes.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/shapes.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/struct.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/struct.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/struct.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

<exec executable="sed" output="${specs.dir}/SVG1.0/types.xml">
		<arg line="-f svgfix.sed ${specs.dir}/SVG1.0/types.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/types.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>


	<exec executable="sed" output="${specs.dir}/SVG1.0/text.xml">
		<arg line="-e'23,5269d' -f svgfix.sed ${specs.dir}/SVG1.0/text.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/text.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>


	<exec executable="sed" output="${specs.dir}/SVG1.0/filters.xml">
		<arg line="-e'24,4785d' -f svgfix.sed ${specs.dir}/SVG1.0/filters.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/filters.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

	<exec executable="sed" output="${specs.dir}/SVG1.0/styling.xml">
		<arg line="-e'23,1563d' -f svgfix.sed ${specs.dir}/SVG1.0/styling.html"/>
	</exec>
	<xmlvalidate file="${specs.dir}/SVG1.0/styling.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>

</target>

<target name="svg-interfaces" depends="svg-init,dom2-interfaces">
	<style basedir="${specs.dir}/SVG1.0"
	       in="${specs.dir}/SVG1.0/coords.xml"
	       out="${build.dir}/svg-interfaces.xml"
	       style="${transforms.dir}/svg-to-interface.xsl">
		<param name="dom2-interfaces" expression="../${build.dir}/dom2-interfaces.xml"/>
	</style>
	<xmlvalidate file="${build.dir}/svg-interfaces.xml"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>
</target>

<target name="svg-schema" depends="svg-interfaces">
	<style in="${build.dir}/svg-interfaces.xml"
	       out="${build.dir}/_svg.xsd"
	       style="${transforms.dir}/dom-to-xsd.xsl">
		<param name="schema-namespace"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/SVG"/>
	</style>

	<!--  remove leading underscore from _xmlns attribute    -->
	<exec executable="sed" output="${build.dir}/svg.xsd">
		<arg line="'s/_xmlns/xmlns/g' ${build.dir}/_svg.xsd"/>
	</exec>
	<delete file="${build.dir}/_svg.xsd"/>
	<xmlvalidate file="${build.dir}/svg.xsd"
	             lenient="yes" failonerror="yes"
	             classname="org.apache.xerces.parsers.SAXParser"/>
</target>

<target name="svg-dtd" depends="svg-interfaces">
	<style in="${build.dir}/svg-interfaces.xml"
	       out="${build.dir}/svg.dtd"
	       style="${transforms.dir}/dom-to-dtd.xsl">
		<param name="schema-namespace"
		       expression="http://www.w3.org/2001/DOM-Test-Suite/SVG"/>
	</style>
	<!-- copy file="${build.dir}/svg.dtd" todir="${tests.dir}/svg"/ -->
</target>


</project> 
